// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VideoSDKRTC
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
import Mediasoup
import Swift
@_exported import VideoSDKRTC
import VideosdkWebSocket
import WebRTC
import _Concurrency
import _StringProcessing
public enum CameraPosition : Swift.Int {
  case back
  case front
  public mutating func toggle()
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CustomVideoTrackConfig {
  case h90p_w160p, h180p_w320p, h216p_w384p, h360p_w640p, h540p_w960p, h720p_w1280p, h1080p_w1920p, h1440p_w2560p, h2160p_w3840p, h120p_w160p, h180p_w240p, h240p_w320p, h360p_w480p, h480p_w640p, h540p_w720p, h720p_w960p, h1080p_w1440p, h1440p_w1920p
  public static func == (a: VideoSDKRTC.CustomVideoTrackConfig, b: VideoSDKRTC.CustomVideoTrackConfig) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CustomRTCMediaStream {
  @objc deinit
}
extension Foundation.Data {
  public func toJSONString() -> Swift.String
  public func toJSON() -> [Swift.String : Any]
  public func toJSONArray() -> [Any]
}
extension Swift.String {
  public func toJSON() -> [Swift.String : Any]
}
extension Swift.Dictionary {
  public func toJSONString() -> Swift.String
}
extension Swift.Array {
  public func toJSONString() -> Swift.String
}
extension Swift.Encodable {
  public func toJSON() -> [Swift.String : Any]
  public func toJSONArray() -> [Any]
}
public struct LivestreamOutput : Swift.Codable {
  public let url: Swift.String
  public let streamKey: Swift.String
  public init(url: Swift.String, streamKey: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MediaStream : Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public var kind: VideoSDKRTC.MediaType {
    get
  }
  public var track: WebRTC.RTCMediaStreamTrack {
    get
  }
  public var producer: Mediasoup.Producer? {
    get
  }
  public var consumer: Mediasoup.Consumer? {
    get
  }
  @objc deinit
}
extension VideoSDKRTC.MediaStream {
  public func pause()
  public func resume()
}
extension VideoSDKRTC.MediaStream {
  public static func == (lhs: VideoSDKRTC.MediaStream, rhs: VideoSDKRTC.MediaStream) -> Swift.Bool
}
public enum MediaType : Swift.Equatable {
  case share
  case state(value: Mediasoup.MediaKind)
  public static func == (a: VideoSDKRTC.MediaType, b: VideoSDKRTC.MediaType) -> Swift.Bool
}
public enum MeetingState : Swift.String {
  case CONNECTING, CONNECTED, CLOSING, CLOSED, CANCELLED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Mode : Swift.String {
  case CONFERENCE, VIEWER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VideoSDKError : Swift.Int {
  case UNKNOWN_ERROR
  case INVALID_API_KEY
  case INVALID_TOKEN
  case INVALID_MEETING_ID
  case INVALID_PARTICIPANT_ID
  case DUPLICATE_PARTICIPANT
  case ACCOUNT_DEACTIVATED
  case ACCOUNT_DISCONTINUED
  case INVALID_PERMISSIONS
  case MAX_PARTCIPANT_REACHED
  case MAX_SPEAKER_REACHED
  case START_RECORDING_FAILED
  case STOP_RECORDING_FAILED
  case START_LIVESTREAM_FAILED
  case STOP_LIVESTREAM_FAILED
  case INVALID_LIVESTREAM_CONFIG
  case START_HLS_FAILED
  case STOP_HLS_FAILED
  case RECORDING_FAILED
  case LIVESTREAM_FAILED
  case HLS_FAILED
  case ERROR_GET_VIDEO_MEDIA
  case ERROR_GET_AUDIO_MEDIA
  case ERROR_GET_DISPLAY_MEDIA
  case ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
  case ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED
  case ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HLSState : Swift.String {
  case HLS_STARTED, HLS_STARTING, HLS_STOPPED, HLS_STOPPING, HLS_PLAYABLE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RecordingState : Swift.String {
  case RECORDING_STARTED, RECORDING_STARTING, RECORDING_STOPPED, RECORDING_STOPPING
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LiveStreamState : Swift.String {
  case LIVESTREAM_STARTED, LIVESTREAM_STARTING, LIVESTREAM_STOPPED, LIVESTREAM_STOPPING
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Meeting : Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public var localParticipant: VideoSDKRTC.Participant {
    get
  }
  public var participants: [Swift.String : VideoSDKRTC.Participant] {
    get
  }
  public var pinnedParticipants: [Swift.String : VideoSDKRTC.ParticipantPinState] {
    get
  }
  public var hlsUrls: VideoSDKRTC.HLSUrl?
  public var hlsState: VideoSDKRTC.HLSState
  public var liveStreamState: VideoSDKRTC.LiveStreamState
  public var recordingState: VideoSDKRTC.RecordingState
  public var pubsub: VideoSDKRTC.PubSub {
    get
  }
  public var customVideoMediaStream: VideoSDKRTC.CustomRTCMediaStream? {
    get
  }
  public var meetingMode: VideoSDKRTC.Mode? {
    get
  }
  @objc deinit
}
extension VideoSDKRTC.Meeting {
  public func join(cameraPosition: AVFoundation.AVCaptureDevice.Position)
  public func leave()
  public func end()
  public func enableWebcam(customVideoStream: VideoSDKRTC.CustomRTCMediaStream? = nil)
  public func disableWebcam()
  public func switchWebcam()
  public func muteMic()
  public func unmuteMic()
  public func startRecording(webhookUrl: Swift.String)
  public func stopRecording()
  public func startLivestream(outputs: [VideoSDKRTC.LivestreamOutput])
  public func stopLivestream()
  public func startHLS(config: VideoSDKRTC.HLSConfig? = nil)
  public func stopHLS()
  public func changeMode(_ mode: VideoSDKRTC.Mode)
}
extension VideoSDKRTC.Meeting {
  public func addEventListener(_ meetingEventListener: VideoSDKRTC.MeetingEventListener)
  public func removeEventListener(_ meetingEventListener: VideoSDKRTC.MeetingEventListener)
}
extension VideoSDKRTC.Meeting {
  public static func == (lhs: VideoSDKRTC.Meeting, rhs: VideoSDKRTC.Meeting) -> Swift.Bool
}
public protocol MeetingEventListener : AnyObject {
  func onMeetingJoined()
  func onMeetingLeft()
  func onParticipantJoined(_ participant: VideoSDKRTC.Participant)
  func onParticipantLeft(_ participant: VideoSDKRTC.Participant)
  func onRecordingStarted()
  func onRecordingStoppped()
  func onLivestreamStarted()
  func onLivestreamStopped()
  func onSpeakerChanged(participantId: Swift.String?)
  func onMicRequested(participantId: Swift.String?, accept: @escaping () -> Swift.Void, reject: @escaping () -> Swift.Void)
  func onWebcamRequested(participantId: Swift.String?, accept: @escaping () -> Swift.Void, reject: @escaping () -> Swift.Void)
  func onSocketError(message: Swift.String)
  func onMeetingStateChanged(meetingState: VideoSDKRTC.MeetingState)
  func onError(error: VideoSDKRTC.VideoSDKError)
  func onHlsStateChanged(state: VideoSDKRTC.HLSState, hlsUrl: VideoSDKRTC.HLSUrl?)
  func onLivestreamStateChanged(state: VideoSDKRTC.LiveStreamState)
  func onRecordingStateChanged(state: VideoSDKRTC.RecordingState)
  func onPinStateChanged(participantId: Swift.String, pinType: VideoSDKRTC.PinType)
  func onParticipantModeChanged(participantId: Swift.String, mode: VideoSDKRTC.Mode)
}
extension VideoSDKRTC.MeetingEventListener {
  public func onMeetingJoined()
  public func onMeetingLeft()
  public func onParticipantJoined(_ participant: VideoSDKRTC.Participant)
  public func onParticipantLeft(_ participant: VideoSDKRTC.Participant)
  public func onRecordingStarted()
  public func onRecordingStoppped()
  public func onLivestreamStarted()
  public func onLivestreamStopped()
  public func onSpeakerChanged(participantId: Swift.String?)
  public func onMicRequested(participantId: Swift.String?, accept: @escaping () -> Swift.Void, reject: @escaping () -> Swift.Void)
  public func onWebcamRequested(participantId: Swift.String?, accept: @escaping () -> Swift.Void, reject: @escaping () -> Swift.Void)
  public func onSocketError(message: Swift.String)
  public func onMeetingStateChanged(meetingState: VideoSDKRTC.MeetingState)
  public func onError(error: VideoSDKRTC.VideoSDKError)
  public func onHlsStateChanged(state: VideoSDKRTC.HLSState, hlsUrl: VideoSDKRTC.HLSUrl?)
  public func onLivestreamStateChanged(state: VideoSDKRTC.LiveStreamState)
  public func onRecordingStateChanged(state: VideoSDKRTC.RecordingState)
  public func onPinStateChanged(participantId: Swift.String, pinType: VideoSDKRTC.PinType)
  public func onParticipantModeChanged(participantId: Swift.String, mode: VideoSDKRTC.Mode)
}
@_hasMissingDesignatedInitializers public class Participant : Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var videoQuality: VideoSDKRTC.VideoQuality {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
  public var streams: [Swift.String : VideoSDKRTC.MediaStream] {
    get
  }
  public var pinState: VideoSDKRTC.ParticipantPinState
  public var mode: VideoSDKRTC.Mode
  @objc deinit
}
extension VideoSDKRTC.Participant {
  public func enableMic()
  public func disableMic()
  public func enableWebcam()
  public func disableWebcam()
  public func remove()
  public func participantPinStateChanged(pinState: VideoSDKRTC.ParticipantPinState)
  public func participantModeChanged(mode: VideoSDKRTC.Mode)
}
extension VideoSDKRTC.Participant {
  public func addStream(_ stream: VideoSDKRTC.MediaStream)
  @discardableResult
  public func removeStream(_ streamId: Swift.String) -> VideoSDKRTC.MediaStream?
  public func removeAllStreams()
  public func setQuality(_ quality: VideoSDKRTC.VideoQuality)
  public func pin(_ peerId: Swift.String = "", _ pinType: VideoSDKRTC.PinType = .SHARE_AND_CAM)
  public func unpin(_ pinType: VideoSDKRTC.PinType = .SHARE_AND_CAM)
  public func setPinState(pinState: VideoSDKRTC.ParticipantPinState, peerId: Swift.String = "")
}
extension VideoSDKRTC.Participant {
  public func addEventListener(_ listener: VideoSDKRTC.ParticipantEventListener)
  public func removeEventListener(_ listener: VideoSDKRTC.ParticipantEventListener)
}
extension VideoSDKRTC.Participant {
  public static func == (lhs: VideoSDKRTC.Participant, rhs: VideoSDKRTC.Participant) -> Swift.Bool
}
public protocol ParticipantEventListener {
  func onStreamEnabled(_ stream: VideoSDKRTC.MediaStream, forParticipant participant: VideoSDKRTC.Participant)
  func onStreamDisabled(_ stream: VideoSDKRTC.MediaStream, forParticipant participant: VideoSDKRTC.Participant)
}
extension VideoSDKRTC.ParticipantEventListener {
  public func onStreamEnabled(_ stream: VideoSDKRTC.MediaStream, forParticipant participant: VideoSDKRTC.Participant)
  public func onStreamDisabled(_ stream: VideoSDKRTC.MediaStream, forParticipant participant: VideoSDKRTC.Participant)
}
public enum PinType : Swift.String {
  case SHARE_AND_CAM, CAM, SHARE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ParticipantPinState : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class PubSub {
  @objc deinit
}
extension VideoSDKRTC.PubSub {
  public func publish(topic: Swift.String, message: Swift.String, options: [Swift.String : Any] = [:])
  public func subscribe(topic: Swift.String, forListener listener: VideoSDKRTC.PubSubMessageListener)
  public func unsubscribe(topic: Swift.String, forListener listener: VideoSDKRTC.PubSubMessageListener)
  public func getMessagesForTopic(_ topic: Swift.String) -> [VideoSDKRTC.PubSubMessage]
}
@objc @_hasMissingDesignatedInitializers public class PubSubMessage : ObjectiveC.NSObject {
  public var id: Swift.String
  public var topic: Swift.String
  public var message: Swift.String
  public var senderId: Swift.String
  public var senderName: Swift.String
  public var timestamp: Swift.String
  @objc deinit
}
public protocol PubSubMessageListener {
  func onMessageReceived(_ message: VideoSDKRTC.PubSubMessage)
}
public class HLSConfig {
  public init(layout: VideoSDKRTC.HLSLayout, theme: VideoSDKRTC.HLSTheme, mode: VideoSDKRTC.HLSMode, quality: VideoSDKRTC.HLSQuality, orientation: VideoSDKRTC.HLSOrientation)
  @objc deinit
}
public class HLSLayout {
  public init(type: VideoSDKRTC.HLSLayoutGrid, priority: VideoSDKRTC.HLSLayoutPriority, gridSize: Swift.Int)
  @objc deinit
}
public enum HLSLayoutPriority : Swift.String {
  case SPEAKER, PIN
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HLSLayoutGrid : Swift.String {
  case GRID, SPOTLIGHT, SIDEBAR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HLSTheme : Swift.String {
  case DEFAULT, LIGHT, DARK
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HLSMode : Swift.String {
  case video_and_audio, audio
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HLSQuality : Swift.String {
  case high, med, low
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HLSOrientation : Swift.String {
  case landscape, portrait
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class HLSUrl {
  @objc deinit
}
public enum VideoQuality : Swift.String, Swift.CaseIterable {
  case high, medium, low
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VideoSDKRTC.VideoQuality]
  public typealias RawValue = Swift.String
  public static var allCases: [VideoSDKRTC.VideoQuality] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class VideoSDK {
  public static func config(token: Swift.String)
  public static func initMeeting(meetingId: Swift.String, participantId: Swift.String = "", participantName: Swift.String = "Guest", micEnabled: Swift.Bool = true, webcamEnabled: Swift.Bool = true, customCameraVideoStream: VideoSDKRTC.CustomRTCMediaStream? = nil, mode: VideoSDKRTC.Mode? = .CONFERENCE) -> VideoSDKRTC.Meeting
  public static func createCameraVideoTrack(encoderConfig: VideoSDKRTC.CustomVideoTrackConfig? = .h360p_w640p, facingMode: AVFoundation.AVCaptureDevice.Position? = .front, multiStream: Swift.Bool? = true) throws -> VideoSDKRTC.CustomRTCMediaStream?
  @objc deinit
}
extension VideoSDKRTC.CameraPosition : Swift.Equatable {}
extension VideoSDKRTC.CameraPosition : Swift.Hashable {}
extension VideoSDKRTC.CameraPosition : Swift.RawRepresentable {}
extension VideoSDKRTC.CustomVideoTrackConfig : Swift.Equatable {}
extension VideoSDKRTC.CustomVideoTrackConfig : Swift.Hashable {}
extension VideoSDKRTC.MeetingState : Swift.Equatable {}
extension VideoSDKRTC.MeetingState : Swift.Hashable {}
extension VideoSDKRTC.MeetingState : Swift.RawRepresentable {}
extension VideoSDKRTC.Mode : Swift.Equatable {}
extension VideoSDKRTC.Mode : Swift.Hashable {}
extension VideoSDKRTC.Mode : Swift.RawRepresentable {}
extension VideoSDKRTC.VideoSDKError : Swift.Equatable {}
extension VideoSDKRTC.VideoSDKError : Swift.Hashable {}
extension VideoSDKRTC.VideoSDKError : Swift.RawRepresentable {}
extension VideoSDKRTC.HLSState : Swift.Equatable {}
extension VideoSDKRTC.HLSState : Swift.Hashable {}
extension VideoSDKRTC.HLSState : Swift.RawRepresentable {}
extension VideoSDKRTC.RecordingState : Swift.Equatable {}
extension VideoSDKRTC.RecordingState : Swift.Hashable {}
extension VideoSDKRTC.RecordingState : Swift.RawRepresentable {}
extension VideoSDKRTC.LiveStreamState : Swift.Equatable {}
extension VideoSDKRTC.LiveStreamState : Swift.Hashable {}
extension VideoSDKRTC.LiveStreamState : Swift.RawRepresentable {}
extension VideoSDKRTC.PinType : Swift.Equatable {}
extension VideoSDKRTC.PinType : Swift.Hashable {}
extension VideoSDKRTC.PinType : Swift.RawRepresentable {}
extension VideoSDKRTC.HLSLayoutPriority : Swift.Equatable {}
extension VideoSDKRTC.HLSLayoutPriority : Swift.Hashable {}
extension VideoSDKRTC.HLSLayoutPriority : Swift.RawRepresentable {}
extension VideoSDKRTC.HLSLayoutGrid : Swift.Equatable {}
extension VideoSDKRTC.HLSLayoutGrid : Swift.Hashable {}
extension VideoSDKRTC.HLSLayoutGrid : Swift.RawRepresentable {}
extension VideoSDKRTC.HLSTheme : Swift.Equatable {}
extension VideoSDKRTC.HLSTheme : Swift.Hashable {}
extension VideoSDKRTC.HLSTheme : Swift.RawRepresentable {}
extension VideoSDKRTC.HLSMode : Swift.Equatable {}
extension VideoSDKRTC.HLSMode : Swift.Hashable {}
extension VideoSDKRTC.HLSMode : Swift.RawRepresentable {}
extension VideoSDKRTC.HLSQuality : Swift.Equatable {}
extension VideoSDKRTC.HLSQuality : Swift.Hashable {}
extension VideoSDKRTC.HLSQuality : Swift.RawRepresentable {}
extension VideoSDKRTC.HLSOrientation : Swift.Equatable {}
extension VideoSDKRTC.HLSOrientation : Swift.Hashable {}
extension VideoSDKRTC.HLSOrientation : Swift.RawRepresentable {}
extension VideoSDKRTC.VideoQuality : Swift.Equatable {}
extension VideoSDKRTC.VideoQuality : Swift.Hashable {}
extension VideoSDKRTC.VideoQuality : Swift.RawRepresentable {}
